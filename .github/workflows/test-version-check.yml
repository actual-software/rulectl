name: Test Version Check Workflow

on:
  push:
    branches:
      - fix/version-check-ci-fix
  pull_request:
    branches:
      - fix/version-check-ci-fix

jobs:
  test-version-check-logic:
    name: Test Version Check Logic
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Test workflow syntax and logic
        run: |
          echo "üß™ Testing version check workflow logic..."
          
          # Simulate the workflow steps to verify they work
          echo "Testing variable assignments..."
          VERSION_CHANGED="true"
          VERSION_ACTUALLY_CHANGED="true" 
          TOTAL_FILES="1"
          NON_VERSION_FILES="0"
          
          echo "- Version file changed: $VERSION_CHANGED"
          echo "- Version actually changed: $VERSION_ACTUALLY_CHANGED"
          echo "- Total files changed: $TOTAL_FILES"
          echo "- Non-version files changed: $NON_VERSION_FILES"
          
          # Test Case 1: Version change only (should pass)
          echo ""
          echo "üß™ Test Case 1: Version change only"
          if [ "$VERSION_CHANGED" = "true" ] && [ "$VERSION_ACTUALLY_CHANGED" = "true" ]; then
            if [ "$NON_VERSION_FILES" -gt 0 ]; then
              echo "‚ùå Would fail - mixed changes detected"
            else
              echo "‚úÖ Would pass - version change only"
              IS_RELEASE_PR="true"
            fi
          else
            IS_RELEASE_PR="false"
          fi
          echo "is_release_pr=$IS_RELEASE_PR"
          
          # Test Case 2: Mixed changes (should fail)
          echo ""
          echo "üß™ Test Case 2: Mixed changes"
          NON_VERSION_FILES="3"
          if [ "$VERSION_CHANGED" = "true" ] && [ "$VERSION_ACTUALLY_CHANGED" = "true" ]; then
            if [ "$NON_VERSION_FILES" -gt 0 ]; then
              echo "‚ùå Would fail - mixed changes detected (expected behavior)"
            else
              echo "‚úÖ Would pass - version change only"
            fi
          fi
          
          # Test Case 3: No version changes (should pass)
          echo ""
          echo "üß™ Test Case 3: No version changes"
          VERSION_CHANGED="false"
          VERSION_ACTUALLY_CHANGED=""
          
          # Test empty variable handling
          if [ -z "$VERSION_ACTUALLY_CHANGED" ]; then
            VERSION_ACTUALLY_CHANGED="false"
          fi
          
          if [ "$VERSION_CHANGED" = "false" ]; then
            echo "‚úÖ Would pass - no version changes"
          fi
          
          echo ""
          echo "üéâ All syntax tests passed! The workflow logic appears correct."

      - name: Validate YAML syntax
        run: |
          echo "üîç Validating YAML syntax of prevent-mixed-version-changes.yml..."
          
          # Check if python3 and pyyaml are available for validation
          if command -v python3 >/dev/null 2>&1; then
            python3 -c "
            import yaml
            import sys
            
            try:
                with open('.github/workflows/prevent-mixed-version-changes.yml', 'r') as f:
                    yaml.safe_load(f)
                print('‚úÖ YAML syntax is valid')
            except yaml.YAMLError as e:
                print(f'‚ùå YAML syntax error: {e}')
                sys.exit(1)
            except FileNotFoundError:
                print('‚ùå Workflow file not found')
                sys.exit(1)
            " 2>/dev/null || echo "‚ö†Ô∏è PyYAML not available, skipping YAML validation"
          else
            echo "‚ö†Ô∏è Python3 not available, skipping YAML validation"
          fi
          
          # At minimum, check file exists and has basic structure
          if [ -f ".github/workflows/prevent-mixed-version-changes.yml" ]; then
            echo "‚úÖ Workflow file exists"
            
            # Check for basic required sections
            if grep -q "^name:" .github/workflows/prevent-mixed-version-changes.yml; then
              echo "‚úÖ Has name section"
            else
              echo "‚ùå Missing name section"
              exit 1
            fi
            
            if grep -q "^on:" .github/workflows/prevent-mixed-version-changes.yml; then
              echo "‚úÖ Has trigger section"
            else
              echo "‚ùå Missing trigger section"
              exit 1
            fi
            
            if grep -q "^jobs:" .github/workflows/prevent-mixed-version-changes.yml; then
              echo "‚úÖ Has jobs section"
            else
              echo "‚ùå Missing jobs section"  
              exit 1
            fi
            
            echo "‚úÖ Basic workflow structure is valid"
          else
            echo "‚ùå Workflow file does not exist"
            exit 1
          fi

      - name: Test shell script syntax
        run: |
          echo "üîç Testing shell script syntax in workflow steps..."
          
          # Extract and test shell scripts from the workflow file
          # This is a basic test - in production you'd want more sophisticated validation
          
          # Check for common shell syntax issues
          if grep -q 'if \[.*\]; then' .github/workflows/prevent-mixed-version-changes.yml; then
            echo "‚úÖ Found properly formatted if statements"
          fi
          
          if grep -q 'echo.*>>' .github/workflows/prevent-mixed-version-changes.yml; then
            echo "‚úÖ Found output redirection syntax"
          fi
          
          # Check for balanced quotes in the workflow
          SINGLE_QUOTES=$(grep -o "'" .github/workflows/prevent-mixed-version-changes.yml | wc -l)
          DOUBLE_QUOTES=$(grep -o '"' .github/workflows/prevent-mixed-version-changes.yml | wc -l)
          
          echo "Single quotes found: $SINGLE_QUOTES"
          echo "Double quotes found: $DOUBLE_QUOTES"
          
          # Basic check - double quotes should be even (balanced)
          if [ $((DOUBLE_QUOTES % 2)) -eq 0 ]; then
            echo "‚úÖ Double quotes appear balanced"
          else
            echo "‚ö†Ô∏è Double quotes may be unbalanced (this could be normal in YAML)"
          fi
          
          echo "‚úÖ Shell script syntax checks completed"

      - name: Summary
        run: |
          echo ""
          echo "üéØ Test Summary"
          echo "==============="
          echo "‚úÖ Workflow logic tests passed"
          echo "‚úÖ YAML structure validation passed"  
          echo "‚úÖ Shell script syntax checks passed"
          echo ""
          echo "The prevent-mixed-version-changes.yml workflow should now work correctly!"
          echo ""
          echo "Next steps:"
          echo "1. Merge this fix to main"
          echo "2. Test with an actual version bump PR"
          echo "3. Remove this test workflow after verification"